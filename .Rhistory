}
else if(any(burnin<0) | any(burnin>=n_iter) | length(burnin)>1){
stop('ERROR: burnin must be a scalar integer from the interval [0,n_iter)')
}
#nSamples Per Chains
n_iters_per_chain=floor((n_iter-burnin)/thin)
### catch errors
if(n_iters_per_chain<1 | (!is.finite(n_iters_per_chain))){
stop('ERROR: number of iters per chain is negative or non finite.
n_iters_per_chain=floor((n_iter-burnin)/thin)')
}
out=list('n_pars_model'=n_pars,
'par_names'=par_names,
'n_chains'=n_chains,
'n_iter'=n_iter,
'init_sd'=init_sd,
'init_center'=init_center,
'n_cores_use'=n_cores_use,
'step_size'=step_size,
'jitter_size'=jitter_size,
'parallel_type'=parallel_type,
'return_trace'=return_trace,
'purify'=Inf,
'use_QMC'=use_QMC,
'quasi_rand_seq'=quasi_rand_seq,
'n_samples_ELBO'=n_samples_ELBO,
'n_samples_LRVB'=n_samples_LRVB,
'LRVB_correction'=LRVB_correction,
'neg_inf'=neg_inf,
'n_pars_dist'=2*n_pars,
'n_iters_per_chain'=n_iters_per_chain)
return(out)
}
dataExample=matrix(stats::rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = TRUE)
##list parameter names
par_names_example=c("mu_1","mu_2")
#log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=TRUE))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=TRUE))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=TRUE))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=TRUE))
return(out)
}
control_pars=AlgoParsDEVI(n_pars=2,
par_names = par_names_example,
n_chains = 12,
n_iter = 1000,
init_sd = 0.01,
init_center = 0,
n_cores_use = 1,
step_size = NULL,
jitter_size = 1e-6,
parallel_type = 'none',
use_QMC = F,
quasi_rand_seq = 'halton',
n_samples_ELBO = 10,
LRVB_correction = TRUE,
n_samples_LRVB = 25,
neg_inf = -750,
thin = 1,
burnin = 0,
return_trace = FALSE)
lambda= c(rep(0,control_pars$n_pars_model),rep(log(1),control_pars$n_pars_model))
applyHold=NULL
applyVec=NULL
for(i in 1:10000){
tictoc::tic()
KLHat_v1(lambda,LogPostLike = LogPostLikeExample,control_pars=control_pars,S=control_pars$n_samples_ELBO,data=dataExample,par_names=par_names_example)
store<-tictoc::toc()
applyVec=c(applyVec,as.double(store$toc-store$tic))
tictoc::tic()
KLHat_v2(lambda,LogPostLike = LogPostLikeExample,control_pars=control_pars,S=control_pars$n_samples_ELBO,data=dataExample,par_names=par_names_example)
store<-tictoc::toc()
applyHold=c(applyHold,as.double(store$toc-store$tic))
}
mean(applyHold-applyVec)
sd(applyHold-applyVec)
?qnorm
QLog_v1=function(use_theta,use_lambda,control_pars,S=1){
#returns log density Q(theta|lambda)
out=0
out=stats::dnorm(x=use_theta,
mean=rep(use_lambda[1:(control_pars$n_pars_model)],S),
sd=rep(exp(use_lambda[((control_pars$n_pars_model)+1):(control_pars$n_pars_dist)]),S),
log=T)
out[(out==-Inf) | is.na(out)]=control_pars$neg_inf
return(sum(out));
}
QLog_v2=function(use_theta,use_lambda,control_pars,S=1){
#returns log density Q(theta|lambda)
out=0
out=stats::dnorm(x=c(t(use_theta)),
mean=rep(use_lambda[1:(control_pars$n_pars_model)],S),
sd=rep(exp(use_lambda[((control_pars$n_pars_model)+1):(control_pars$n_pars_dist)]),S),
log=T)
out[(out==-Inf) | is.na(out)]=control_pars$neg_inf
return(sum(out));
}
QSample_v1=function(use_lambda,control_pars,S){
#returns a S by n_pars_model matrix sampled from Q(theta|lambda)
out=matrix(NA,S,control_pars$n_pars_model)
if(control_pars$use_QMC==T){
if(control_pars$quasi_rand_seq=='sobol')quantileMat=randtoolbox::sobol(S,control_pars$n_pars_model)
if(control_pars$quasi_rand_seq=='halton')quantileMat=randtoolbox::halton(S,control_pars$n_pars_model)
} else {
quantileMat=stats::runif(S*control_pars$n_pars_model,0,1)
}
# for(i in 1:control_pars$n_pars_model){
#   qs=quantileMat[,i]
#   out[,i]=stats::qnorm(qs,use_lambda[i],exp(use_lambda[control_pars$n_pars_model+i]))
# }
out=stats::qnorm(c(t(quantileMat)),rep(use_lambda[1:control_pars$n_pars_model],S),rep(exp(use_lambda[(control_pars$n_pars_model+1):(control_pars$n_pars_dist)]),S))
return(out)
}
QSample_v2=function(use_lambda,control_pars,S){
#returns a S by n_pars_model matrix sampled from Q(theta|lambda)
out=matrix(NA,S,control_pars$n_pars_model)
if(control_pars$use_QMC==T){
if(control_pars$quasi_rand_seq=='sobol')quantileMat=randtoolbox::sobol(S,control_pars$n_pars_model)
if(control_pars$quasi_rand_seq=='halton')quantileMat=randtoolbox::halton(S,control_pars$n_pars_model)
} else {
quantileMat=matrix(stats::runif(S*control_pars$n_pars_model,0,1),S,control_pars$n_pars_model)
}
for(i in 1:control_pars$n_pars_model){
qs=quantileMat[,i]
out[,i]=stats::qnorm(qs,use_lambda[i],exp(use_lambda[control_pars$n_pars_model+i]))
}
#out=stats::qnorm(c(t(quantileMat)),rep(use_lambda[1:control_pars$n_pars_model],S),rep(exp(use_lambda[(control_pars$n_pars_model+1):(control_pars$n_pars_dist)]),S))
return(out)
}
KLHat_v1=function(lambda,LogPostLike,control_pars,S,...){
# monte carlo approximation KL divergence up to a constant
out=0 #initalize output vector
# sample from q
theta_mat <- QSample_v1(use_lambda=lambda,control_pars,S)
# calc mean differences in log densities for theta_mat
q_log_density=QLog_v1(theta_mat,use_lambda = lambda,control_pars,S)
post_log_density=apply(matrix(theta_mat,ncol=control_pars$n_pars_model,byrow = T),MARGIN = 1,FUN=LogPostLike,...)
out <- mean(q_log_density-post_log_density)
return(out)
}
KLHat_v2=function(lambda,LogPostLike,control_pars,S,...){
# monte carlo approximation KL divergence up to a constant
out=0 #initalize output vector
# sample from q
theta_mat <- QSample_v2(use_lambda=lambda,control_pars,S)
# calc mean differences in log densities for theta_mat
q_log_density=QLog_v2(theta_mat,use_lambda = lambda,control_pars,S)
post_log_density=apply(theta_mat,MARGIN = 1,FUN=LogPostLike,...)
out <- mean(q_log_density-post_log_density)
return(out)
}
ELBO=function(lambda,LogPostLike,control_pars,S,...){
# monte carlo approximation ELBO
out=KLHat(lambda,LogPostLike,control_pars,S,...)*-1
return(out)
}
AlgoParsDEVI=function(n_pars,
par_names=NULL,
n_chains = NULL,
n_iter = 1000,
init_sd = 0.01,
init_center = 0,
n_cores_use = 1,
step_size = NULL,
jitter_size = 1e-6,
parallel_type = 'none',
use_QMC = T,
quasi_rand_seq = 'halton',
n_samples_ELBO = 10,
LRVB_correction = TRUE,
n_samples_LRVB = 25,
neg_inf = -750,
thin = 1,
burnin = 0,
return_trace = FALSE,
crossover_rate=1){
# n_pars
### catch errors
n_pars=as.integer(n_pars)
if(any(!is.finite(n_pars))){
stop('ERROR: n_pars is not finite')
}  else if( n_pars<1 | length(n_pars)>1){
stop('ERROR: n_pars must be a postitive integer scalar')
}
# par_names
### catch errors
if(is.null(par_names)){
par_names=paste0('par',1:n_pars)
}  else if(!(length(par_names)==n_pars)){
stop('ERROR: par_names does not match size of n_pars')
}
dist_par_names=c(paste0(par_names,'_MEAN'),paste0(par_names,'_VAR'))
# n_chains
### if null assign default value
if(is.null(n_chains)){
n_chains=max(3*n_pars,4)
}
### catch errors
n_chains=as.integer(n_chains)
if(any(!is.finite(n_chains))){
stop('ERROR: n_chains is not finite')
}
else if( n_chains<4 | length(n_chains)>1){
stop('ERROR: n_chains must be a postitive integer scalar, and atleast 4')
}
# n_iter
### if null assign default value
if(is.null(n_iter)){
n_iter=1000
}
### catch errors
n_iter=as.integer(n_iter)
if(any(!is.finite(n_iter))){
stop('ERROR: n_iter is not finite')
}
else if( n_iter<4 | length(n_iter)>1){
stop('ERROR: n_iter must be a postitive integer scalar, and atleast 4')
}
# init_sd
init_sd=as.numeric(init_sd)
if(any(!is.finite(init_sd))){
stop('ERROR: init_sd is not finite')
} else if(any(init_sd<0 | is.complex(init_sd))){
stop('ERROR: init_sd must be positive and real-valued')
} else if(!(length(init_sd)==1 | length(init_sd)==n_pars)){
stop('ERROR: init_sd vector length must be 1 or n_pars')
}
if(any(init_sd==0)){
warning('WARNING an init_sd value is 0')
}
# init_center
init_center=as.numeric(init_center)
if(any(!is.finite(init_center))){
stop('ERROR: init_center is not finite')
} else if(any(is.complex(init_center))){
stop('ERROR: init_center must be real valued')
} else if(!(length(init_center)==1 | length(init_center)==n_pars)){
stop('ERROR: init_center vector length must be 1 or n_pars')
}
# n_cores_use
### assign NULL value default
if(is.null(n_cores_use)){
n_cores_use=1
}
### catch any errors
n_cores_use=as.integer(n_cores_use)
if(any(!is.finite(n_cores_use))){
stop('ERROR: n_cores_use is not finite')
} else if( n_cores_use<1 | length(n_cores_use)>1){
stop('ERROR: n_cores_use must be a postitive integer scalar, and atleast 1')
}
# step_size
### assign NULL value default
if(is.null(step_size)){
step_size=2.38/sqrt(2*n_pars) # step size recommend in ter braak's 2006 paper
}
### catch any errors
if(any(!is.finite(step_size))){
stop('ERROR: step_size is not finite')
} else if(any(step_size<=0 | is.complex(step_size))){
stop('ERROR: step_size must be positive and real-valued')
} else if(!(length(step_size)==1)){
stop('ERROR: step_size vector length must be 1 ')
}
#jitter_size
### assign NULL value default
if(is.null(jitter_size)){
jitter_size=1e-6
}
### catch any errors
if(any(!is.finite(jitter_size))){
stop('ERROR: jitter_size is not finite')
} else if(any(jitter_size<=0 | is.complex(jitter_size))){
stop('ERROR: jitter_size must be positive and real-valued')
} else if(!(length(jitter_size)==1)){
stop('ERROR: jitter_size vector length must be 1 ')
}
# crossover_rate
### if null assign default value
if(any(is.null(crossover_rate))){
crossover_rate=1
}
### catch errors
crossover_rate=as.numeric(crossover_rate)
if(any(!is.finite(crossover_rate))){
stop('ERROR: crossover_rate is not finite')
}
else if(any(crossover_rate>1) | any(crossover_rate<=0) | length(crossover_rate)>1){
stop('ERROR: crossover_rate must be a numeric scalar on the interval (0,1]')
} else if(is.complex(crossover_rate)){
stop('ERROR: crossover_rate cannot be complex')
}
#parallel_type
validParType=c('none','FORK','PSOCK')
### assign NULL value default
if(is.null(parallel_type)){
parallel_type='none'
}
### catch any errors
if(!parallel_type %in% validParType){
stop('ERROR: invalid parallel_type')
}
# thin
### if null assign default value
if(is.null(thin)){
thin=0
}
### catch errors
thin=as.integer(thin)
if(any(!is.finite(thin))){
stop('ERROR: thin is not finite')
}
else if(any(thin<1) | length(thin)>1){
stop('ERROR: thin must be a scalar postive integer')
}
# use_QMC
if(any(is.null(use_QMC))){
use_QMC=TRUE
}
if(length(use_QMC)>1){
stop('length(use_QMC)>1, please use a scalar logical')
}
if(!((use_QMC==0) | (use_QMC==1))){
stop('ERROR: use_QMC must be a scalar logical')
}
use_QMC=as.logical(use_QMC)
# LRVB_correction
### assign value if null
if(any(is.null(LRVB_correction))){
LRVB_correction=TRUE
}
### catch errors
if(length(LRVB_correction)>1){
stop('length(LRVB_correction)>1, please use a scalar logical')
}
if(!((LRVB_correction==0) | (LRVB_correction==1))){
stop('ERROR: LRVB_correction must be a scalar logical')
}
LRVB_correction=as.logical(LRVB_correction)
if(LRVB_correction){
# if using LRVB correction check for valid samples count
# n_samples_LRVB
### assign value if null
n_samples_LRVB=as.integer(n_samples_LRVB)
if(any(is.null(n_samples_LRVB))){
n_samples_LRVB=25
}
### catch errors
if(any(!is.finite(n_samples_LRVB))){
stop('ERROR: n_samples_LRVB is not finite')
}
else if(any(n_samples_LRVB<1) | length(n_samples_LRVB)>1){
stop('ERROR: n_samples_LRVB must be a scalar postive integer')
}
}
# n_samples_ELBO
### assign value if null
n_samples_ELBO=as.integer(n_samples_ELBO)
if(any(is.null(n_samples_ELBO))){
n_samples_ELBO=10
}
### catch errors
if(any(!is.finite(n_samples_ELBO))){
stop('ERROR: n_samples_ELBO is not finite')
}
else if(any(n_samples_ELBO<1) | length(n_samples_ELBO)>1){
stop('ERROR: n_samples_ELBO must be a scalar postive integer')
}
# quasi_rand_seq
quasi_rand_seq=tolower(as.character(quasi_rand_seq))
valid_quasi_rand_seqs=c("sobol","halton")
### assign NULL value default
if(is.null(quasi_rand_seq)){
quasi_rand_seq='sobol'
}
### catch any errors
if(!quasi_rand_seq %in% valid_quasi_rand_seqs){
stop(paste0('ERROR: invalid quasi_rand_seq; must be one of: ', paste(valid_quasi_rand_seqs,sep = ',')))
}
# neg_inf
### assign NULL value default
if(any(is.null(neg_inf))){
neg_inf=-750
}
### catch any errors
if(length(neg_inf)>1){
stop('length(neg_inf)>1, please use a scalar numeric')
}
if(!is.numeric(neg_inf)){
stop('neg_inf must be a numeric')
}
# burnin
### if null assign default value
if(is.null(burnin)){
burnin=0
}
### catch errors
burnin=as.integer(burnin)
if(any(!is.finite(burnin))){
stop('ERROR: burnin is not finite')
}
else if(any(burnin<0) | any(burnin>=n_iter) | length(burnin)>1){
stop('ERROR: burnin must be a scalar integer from the interval [0,n_iter)')
}
#nSamples Per Chains
n_iters_per_chain=floor((n_iter-burnin)/thin)
### catch errors
if(n_iters_per_chain<1 | (!is.finite(n_iters_per_chain))){
stop('ERROR: number of iters per chain is negative or non finite.
n_iters_per_chain=floor((n_iter-burnin)/thin)')
}
out=list('n_pars_model'=n_pars,
'par_names'=par_names,
'n_chains'=n_chains,
'n_iter'=n_iter,
'init_sd'=init_sd,
'init_center'=init_center,
'n_cores_use'=n_cores_use,
'step_size'=step_size,
'jitter_size'=jitter_size,
'parallel_type'=parallel_type,
'return_trace'=return_trace,
'purify'=Inf,
'use_QMC'=use_QMC,
'quasi_rand_seq'=quasi_rand_seq,
'n_samples_ELBO'=n_samples_ELBO,
'n_samples_LRVB'=n_samples_LRVB,
'LRVB_correction'=LRVB_correction,
'neg_inf'=neg_inf,
'n_pars_dist'=2*n_pars,
'n_iters_per_chain'=n_iters_per_chain)
return(out)
}
dataExample=matrix(stats::rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = TRUE)
##list parameter names
par_names_example=c("mu_1","mu_2")
#log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=TRUE))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=TRUE))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=TRUE))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=TRUE))
return(out)
}
control_pars=AlgoParsDEVI(n_pars=2,
par_names = par_names_example,
n_chains = 12,
n_iter = 1000,
init_sd = 0.01,
init_center = 0,
n_cores_use = 1,
step_size = NULL,
jitter_size = 1e-6,
parallel_type = 'none',
use_QMC = F,
quasi_rand_seq = 'halton',
n_samples_ELBO = 10,
LRVB_correction = TRUE,
n_samples_LRVB = 25,
neg_inf = -750,
thin = 1,
burnin = 0,
return_trace = FALSE)
lambda= c(rep(0,control_pars$n_pars_model),rep(log(1),control_pars$n_pars_model))
applyHold=NULL
applyVec=NULL
for(i in 1:10000){
tictoc::tic()
KLHat_v1(lambda,LogPostLike = LogPostLikeExample,control_pars=control_pars,S=control_pars$n_samples_ELBO,data=dataExample,par_names=par_names_example)
store<-tictoc::toc()
applyVec=c(applyVec,as.double(store$toc-store$tic))
tictoc::tic()
KLHat_v2(lambda,LogPostLike = LogPostLikeExample,control_pars=control_pars,S=control_pars$n_samples_ELBO,data=dataExample,par_names=par_names_example)
store<-tictoc::toc()
applyHold=c(applyHold,as.double(store$toc-store$tic))
}
mean(applyHold-applyVec)
sd(applyHold-applyVec)
require(styler)
install.packages("styler")
require(styler)
default_style_guide_attributes()
default_style_guide_attributes()
getwd()
style_dir()
require(parallel)
?parLapplyLB
?set.seed
?message
?par
par()
message("hello")
?stop
check()
require(roxygen2)
require(devtools)
check()
x <- openssl::download_ssl_cert("comtrade.un.org")
lapply(x, `[[`, "validity")
check()
check()
check()
