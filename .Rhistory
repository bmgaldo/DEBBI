stop('ERROR: init_center must be real valued')
} else if(!(length(init_center)==1 | length(init_center)==n_pars)){
stop('ERROR: init_center vector length must be 1 or n_pars')
}
# n_cores_use
### assign NULL value default
if(is.null(n_cores_use)){
n_cores_use=1
}
### catch any errors
n_cores_use=as.integer(n_cores_use)
if(any(!is.finite(n_cores_use))){
stop('ERROR: n_cores_use is not finite')
} else if( n_cores_use<1 | length(n_cores_use)>1){
stop('ERROR: n_cores_use must be a postitive integer scalar, and atleast 1')
}
# step_size
### assign NULL value default
if(is.null(step_size)){
step_size=2.38/sqrt(2*n_pars) # step size recommend in ter braak's 2006 paper
}
### catch any errors
if(any(!is.finite(step_size))){
stop('ERROR: step_size is not finite')
} else if(any(step_size<=0 | is.complex(step_size))){
stop('ERROR: step_size must be positive and real-valued')
} else if(!(length(step_size)==1)){
stop('ERROR: step_size vector length must be 1 ')
}
#jitter_size
### assign NULL value default
if(is.null(jitter_size)){
jitter_size=1e-6
}
### catch any errors
if(any(!is.finite(jitter_size))){
stop('ERROR: jitter_size is not finite')
} else if(any(jitter_size<=0 | is.complex(jitter_size))){
stop('ERROR: jitter_size must be positive and real-valued')
} else if(!(length(jitter_size)==1)){
stop('ERROR: jitter_size vector length must be 1 ')
}
#parallelType
validParType=c('none','FORK','PSOCK')
### assign NULL value default
if(is.null(parallelType)){
parallelType='none'
}
### catch any errors
if(!parallelType %in% validParType){
stop('ERROR: invalid parallelType')
}
# burnin
### if null assign default value
if(is.null(burnin)){
burnin=0
}
### catch errors
burnin=as.integer(burnin)
if(any(!is.finite(burnin))){
stop('ERROR: burnin is not finite')
}
else if(any(burnin<0) | any(burnin>=n_iter) | length(burnin)>1){
stop('ERROR: burnin must be a scalar integer from the interval [0,n_iter)')
}
# thin
### if null assign default value
if(is.null(thin)){
thin=0
}
### catch errors
thin=as.integer(thin)
if(any(!is.finite(thin))){
stop('ERROR: thin is not finite')
}
else if(any(thin<1) | length(thin)>1){
stop('ERROR: thin must be a scalar postive integer')
}
#nSamples Per Chains
nSamplesPerChain=floor((n_iter-burnin)/thin)
### catch errors
if(nSamplesPerChain<1 | (!is.finite(nSamplesPerChain))){
stop('ERROR: number of samples per chain is negative or non finite.
nSamplesPerChain=floor((n_iter-burnin)/thin)')
}
# purify
nSamplesPerChain=floor((n_iter-burnin)/thin)
### catch errors
if(nSamplesPerChain<1 | (!is.finite(nSamplesPerChain))){
stop('ERROR: number of samples per chain is negative or non finite.
nSamplesPerChain=floor((n_iter-burnin)/thin)')
}
out=list('n_pars'=n_pars,
'n_chains'=n_chains,
'n_iter'=n_iter,
'init_sd'=init_sd,
'init_center'=init_center,
'n_cores_use'=n_cores_use,
'step_size'=step_size,
'jitter_size'=jitter_size,
'parallelType'=parallelType,
'burnin'=burnin,
'thin'=thin,
'purify'=Inf,
'nSamplesPerChain'=nSamplesPerChain)
return(out)
}
rm(list = ls())
load_all()
document()
load_all()
document()
require(devtools)
load_all()
require(devtools)
load_all()
document()
check()
require(doParallel)
?doParallel
?makeCluster
?stopCluster
?parLapply
source("~/Dropbox/DEBBI/R/DEMCMC.R")
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
warnings()
warnings
warning
warning()
warnings()
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
document()
require(devtools)
rm(list = ls())
load_all()
document()
check()
?stats
stats::runif(1)
stats::runif(1)
stats::runif(1)
require(devtools)
rm(list = ls())
load_all()
document()
check()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
usethis::use_package("doParallel")
usethis::use_package("stats")
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
?sample
?stats
require(devtools)
rm(list = ls())
load_all()
document()
check()
require(devtools)
rm(list = ls())
load_all()
document()
check()
use_mit_license("Brendan Galdo")
require(devtools)
rm(list = ls())
load_all()
document()
check()
library(DEBBI)
devtools::install_github("bmgaldo/DEBBI")
library(DEBBI)
# simulate from model
dataExample=matrix(rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = T)
# list parameter names
par_names_example=c("mu_1","mu_2")
# log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=T))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=T))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=T))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=T))
return(out)
}
# Sample from posterior
DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=1000, n_chains=12,
init_sd=.01,init_center=0,
n_cores_use=1,step_size=NULL,
jitter_size=1e-6,parallelType = "none"),data=dataExample,
par_names = par_names_example)
devtools::install_github("bmgaldo/DEBBI")
devtools::install_github("bmgaldo/DEBBI")
devtools::install_github("bmgaldo/DEBBI")
library(DEBBI)
# simulate from model
dataExample=matrix(rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = T)
# list parameter names
par_names_example=c("mu_1","mu_2")
# log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=T))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=T))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=T))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=T))
return(out)
}
# Sample from posterior
DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=1000, n_chains=12,
init_sd=.01,init_center=0,
n_cores_use=1,step_size=NULL,
jitter_size=1e-6,parallelType = "none"),data=dataExample,
par_names = par_names_example)
load_all()
require(devtools)
load_all()
document()
?DEMCMC
load_all()
# simulate from model
dataExample=matrix(rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = T)
# list parameter names
par_names_example=c("mu_1","mu_2")
# log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=T))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=T))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=T))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=T))
return(out)
}
# simulate from model
dataExample=matrix(rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = T)
# list parameter names
par_names_example=c("mu_1","mu_2")
# log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=T))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=T))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=T))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=T))
return(out)
}
# Sample from posterior
DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=1000, n_chains=12,
init_sd=.01,init_center=0,
n_cores_use=1,step_size=NULL,
jitter_size=1e-6,parallelType = "none"),data=dataExample,
par_names = par_names_example)
10%%1
load_all()
# simulate from model
dataExample=matrix(rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = T)
# list parameter names
par_names_example=c("mu_1","mu_2")
# log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=T))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=T))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=T))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=T))
return(out)
}
# Sample from posterior
DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=1000, n_chains=12,
init_sd=.01,init_center=0,
n_cores_use=1,step_size=NULL,
jitter_size=1e-6,parallelType = "none"),data=dataExample,
par_names = par_names_example)
# Sample from posterior
out <- DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=1000, n_chains=12,
init_sd=.01,init_center=0,
n_cores_use=1,step_size=NULL,
jitter_size=1e-6,parallelType = "none"),data=dataExample,
par_names = par_names_example)
out
dim(post$samples)
dim(out$samples)
load_all()
# Sample from posterior
post <- DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=1000, n_chains=12,
init_sd=.01,init_center=0,
n_cores_use=1,step_size=NULL,
jitter_size=1e-6,parallelType = "none"),data=dataExample,
par_names = par_names_example)
par(mfrow=c(1,3))
for(i in 1:length(par_names_example)){
matplot(post$samples[,,i],type='l',main=par_names_example[i])
}
matplot(post$log_post_density,type='l')
# Sample from posterior
post <- DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=1000, n_chains=12,
init_sd=.01,init_center=0,
n_cores_use=1,step_size=NULL,
jitter_size=1e-6,burnin=100,parallelType = "none"),data=dataExample,
par_names = par_names_example)
par(mfrow=c(1,3))
for(i in 1:length(par_names_example)){
matplot(post$samples[,,i],type='l',main=par_names_example[i])
}
par(mfrow=c(2,2))
for(i in 1:length(par_names_example)){
hist(post$samples[,,i],main=par_names_example[i],prob=T)
matplot(post$samples[,,i],type='l',main=par_names_example[i])
}
par(mfrow=c(2,2))
for(i in 1:length(par_names_example)){
hist(post$samples[,,i],main=par_names_example[i],xlab=par_names_example[i],prob=T)
matplot(post$samples[,,i],type='l',main=par_names_example[i],xlab=par_names_example[i])
}
par(mfrow=c(2,2))
hist(post$samples[,,1],main="marginal posterior disttribution",xlab=par_names_example[1],prob=T)
matplot(post$samples[,,1],type='l',ylab=par_names_example[1],main="chain trace plot")
hist(post$samples[,,2],xlab=par_names_example[2],prob=T)
matplot(post$samples[,,2],type='l',ylab=par_names_example[2])
hist(post$samples[,,2],xlab=par_names_example[2],prob=T,main="")
par(mfrow=c(2,2))
hist(post$samples[,,1],main="marginal posterior disttribution",xlab=par_names_example[1],prob=T)
matplot(post$samples[,,1],type='l',ylab=par_names_example[1],main="chain trace plot")
hist(post$samples[,,2],xlab=par_names_example[2],prob=T,main="")
matplot(post$samples[,,2],type='l',ylab=par_names_example[2])
par(mfrow=c(2,2))
hist(post$samples[,,1],main="marginal posterior distribution",xlab=par_names_example[1],prob=T)
matplot(post$samples[,,1],type='l',ylab=par_names_example[1],main="chain trace plot")
hist(post$samples[,,2],xlab=par_names_example[2],prob=T,main="")
matplot(post$samples[,,2],type='l',ylab=par_names_example[2])
par(mfrow=c(2,2))
hist(post$samples[,,1],main="marginal posterior distribution",
xlab=par_names_example[1],prob=T)
matplot(post$samples[,,1],type='l',ylab=par_names_example[1],
main="chain trace plot",xlab="iteration")
hist(post$samples[,,2],xlab=par_names_example[2],prob=T,main="")
matplot(post$samples[,,2],type='l',ylab=par_names_example[2],xlab="iteration")
load_all()
devtools::load_all()
if(iter%%100==0)print(paste0('iter ',iter,'/',control_pars$n_iter))
devtools::install_github("bmgaldo/DEBBI")
load_all()
document()
load_all()
document()
check()
load_all()
check()
check()
document()
check()
load_all()
document()
check()
?add
load_all()
document()
load_all()
document()
load_all()
document()
load_all()
document()
load_all()
document()
load_all()
document()
devtools::install_github("bmgaldo/DEBBI")
?DEMCMC
load_all()
document()
?DEMCMC
check()
True
?TRUE
load_all()
document()
check()
devtools::install_github("bmgaldo/DEBBI")
library(DEBBI)
# simulate from model
dataExample=matrix(rnorm(100,c(-1,1),c(1,1)),nrow=50,ncol=2,byrow = T)
# list parameter names
par_names_example=c("mu_1","mu_2")
# log posterior likelihood function = log likelihood + log prior | returns a scalar
LogPostLikeExample=function(x,data,par_names){
out=0
names(x)<-par_names
# log prior
out=out+sum(dnorm(x["mu_1"],0,sd=1,log=T))
out=out+sum(dnorm(x["mu_2"],0,sd=1,log=T))
# log likelihoods
out=out+sum(dnorm(data[,1],x["mu_1"],sd=1,log=T))
out=out+sum(dnorm(data[,2],x["mu_2"],sd=1,log=T))
return(out)
}
# Sample from posterior
post <- DEMCMC(LogPostLike=LogPostLikeExample,
control_pars=AlgoParsDEMCMC(n_pars=length(par_names_example),
n_iter=500,
n_chains=12,
init_sd=.01,
init_center=0,
n_cores_use=1,
step_size=NULL,
jitter_size=1e-6,
burnin=100,
parallelType = "none"),
data=dataExample,
par_names = par_names_example)
?DEMCMC
load_all()
document()
load_all()
document()
?DEMCMC
load_all()
document()
?DEMCMC
exp(-750)
exp(-730)
exp(-735)
exp(-736)
exp(-737)
exp(-738)
exp(-739)
?exp
?%in%
%in%
%in%()
methods(%in%)
methods(class=%in%)
